local encoder_lua = require('encoder_lua/encoder')

function get_encoder(self, name)
	local encoder = self.encoders[name]
	if not encoder then
		--return encoder_cpp, 'C++'
		print("encoder not found:", name)
		return nil
	end
	return encoder, name
end

-- ***********************************************************************************
-- Performance tests

function map_feature_name(name)
	-- map from buildscript name to descriptive name
	if name == 'zig' then
		return 'Zig'
	end
	if name == 'cpp' then
		return 'C++'
	end
	if name == 'csharp' then
		return 'C#'
	end
	if name == 'vanilla' then
		return 'Lua'
	end
	return nil
end

local function perf_test_init(self, feature, test, loopcount)
	local _, decoder_name = get_encoder(self, feature)
	--print(string.format("Test Start: Feature %s: %s: #loops: %d  decoder: %s", feature, test, loopcount, decoder_name))

	self.start_time = socket.gettime() -- last in the function
end

local function perf_test_exit(self, feature, test)
	self.end_time = socket.gettime() -- first in the function

	local t = self.end_time - self.start_time
	print(string.format("    %.5s: %.5s: time: %f s", feature, test, t))
end

local function perf_test_execute(self, feature, test, loopcount)
	local decoder, decoder_name = get_encoder(self, feature)
	if not decoder then
		return
	end

	if decoder_name ~= feature then
		print(string.format("Wanted decoder %s, but got %s", feature, decoder_name))
		return
	end

	if test == 'Add' then
		self.sum = 0
		for i=1,loopcount do
			self.sum = self.sum + decoder.add(i*3, i)
		end
	elseif test == 'Rot13' then
		self.sum = 0
		for i=1,loopcount do
			local s = decoder.rot13("Hello world!")
			self.sum = self.sum + #s
		end
	end
end

-- ***********************************************************************************

function update_text(self, encoder_name, message)
	local encoder, encoder_name = get_encoder(self, encoder_name)

	if not encoder then
		print("No encoder found:", encoder_name)
		return
	end

	n = gui.get_node("lbl" .. encoder_name)
	gui.set_text(n, encoder_name .. ":")

	local decoded = encoder.rot13(message)
	if not decoded then
		decoded = '-- decoding failed --'
	end
	n = gui.get_node("txt" .. encoder_name)
	gui.set_text(n, decoded)

	n = gui.get_node("txtCfg" .. encoder_name)
	local status, info = pcall(encoder.get_info)
	if status then
		gui.set_text(n, json.encode(info))
	else
		gui.set_text(n, '-- reading config failed --')
	end

end

function init(self)

	self.encoders = {}

	local testfeatures = {}
	local encoder = nil
	if encoder_lua then
		self.encoders['Lua'] = encoder_lua
		encoder = encoder and encoder or self.encoders['Lua']
		table.insert(testfeatures, 'Lua')
	end

	if encoder_cpp then
		self.encoders['C++'] = encoder_cpp
		encoder = encoder and encoder or self.encoders['C++']
		table.insert(testfeatures, 'C++')
	end

	if encoder_zig then
		self.encoders['Zig'] = encoder_zig
		encoder = encoder and encoder or self.encoders['Zig']
		table.insert(testfeatures, 'Zig')
	end

	if encoder_cs then
		encoder_cs.test_gc()

		self.encoders['C#'] = encoder_cs
		encoder = encoder and encoder or self.encoders['C#']
		table.insert(testfeatures, 'C#')
	end

	local message = "Hello Defold friends!"
	local encoded = encoder.rot13(message)
	local n = gui.get_node("txtEncoded")
	gui.set_text(n, encoded)

	update_text(self, 'Lua', encoded)
	update_text(self, 'C++', encoded)
	update_text(self, 'Zig', encoded)
	update_text(self, 'C#', encoded)

	self.tests = {'Rot13', 'Add'}
	self.testfeatures = testfeatures
	self.currenttest = 1
	self.currentfeature = 1
	self.perftest = sys.get_config_int('test.perf_test', 0)

	pprint("Enabled test features:", self.testfeatures)
	pprint("Running tests:", self.tests)
end

function update(self, dt)
	if self.perftest > 0 then
		local loopcount = sys.get_config_int('test.loopcount', 0)

		if self.currenttest <= #self.tests then

			local test = self.tests[self.currenttest]
			if self.currentfeature == 1 then
				print(string.format("Test start: %s #%d", test, loopcount))
			end

			if self.currentfeature <= #self.testfeatures then
				local feature = self.testfeatures[self.currentfeature]

				perf_test_init(self, feature, test, loopcount)
				perf_test_execute(self, feature, test, loopcount)
				perf_test_exit(self, feature, test)

				self.currentfeature = self.currentfeature + 1
			end

			if self.currentfeature > #self.testfeatures then
				self.currenttest = self.currenttest + 1
				self.currentfeature = 1
			end
		end
	end
end
