local encoder_lua = require('encoder_lua/encoder')

function get_encoder(self, name)
	local encoder = self.encoders[name]
	if not encoder then
		return encoder_cpp, 'C++' -- fallback to C++ encoder
	end
	return encoder, name
end

function update_text(self, encoder_name, message)
	local encoder, encoder_name = get_encoder(self, encoder_name)

	if not encoder then
		return
	end

	n = gui.get_node("lbl" .. encoder_name)
	gui.set_text(n, encoder_name .. ":")

	local decoded = encoder.rot13(message)
	if not decoded then
		decoded = '-- decoding failed --'
	end
	n = gui.get_node("txt" .. encoder_name)
	gui.set_text(n, decoded)

	n = gui.get_node("txtCfg" .. encoder_name)
	local status, info = pcall(encoder.get_info)
	if status then
		gui.set_text(n, json.encode(info))
	else
		gui.set_text(n, '-- reading config failed --')
	end

end

function init(self)

	self.encoders = {}

	if encoder_lua then
		self.encoders['Lua'] = encoder_lua
	end

	if encoder_cpp then
		self.encoders['C++'] = encoder_cpp
	end

	if encoder_zig then
		self.encoders['Zig'] = encoder_zig
	end

	if encoder_cs then
		self.encoders['C#'] = encoder_cs
	end

	local message = "Hello Defold friends!"
	local encoded = encoder_cpp.rot13(message)
	local n = gui.get_node("txtEncoded")
	gui.set_text(n, encoded)

	update_text(self, 'Lua', encoded)
	update_text(self, 'C++', encoded)
	update_text(self, 'Zig', encoded)
	update_text(self, 'C#', encoded)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end
